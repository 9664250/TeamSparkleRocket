{"mode":"Blocks","workspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"^}X}Byfbn{U@:GFe-$Id\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">motorg</variable><variable type=\"broadcast_msg\" id=\"!-)tsN`Vh$UHCxXs@OgJ\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">message1</variable></variables><block type=\"v5_events_when_driver\" id=\"jAO8X|$-;JeNnhJG0XMa\" x=\"10\" y=\"10\"><next><block type=\"v5_control_if_then_else\" id=\"BqfHH)t%/m],FjYRD|fY\"><value name=\"CONDITION\"><block type=\"v5_operator_equal_to\" id=\"Hn7kU1UZM!w@XG:@9x~5\"><value name=\"OPERAND1\"><shadow type=\"math_number\" id=\"~V|+:,-`a0cp[q5;cF08\"><field name=\"NUM\">1</field></shadow></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\"C2*HA%}yFmZJyL:$x_X]\"><field name=\"NUM\">50</field></shadow><block type=\"v5_variables_variable\" id=\"v$W%-b%a)M0OILv;_4n|\"><field name=\"VARIABLE\" id=\"^}X}Byfbn{U@:GFe-$Id\" variabletype=\"\">motorg</field></block></value></block></value><statement name=\"SUBSTACK\"><block type=\"v5_motion_set_motor_velocity\" id=\"XTj^fjDR2_lP#u9XTb|D\"><field name=\"MOTOR\">LeftSide</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"V^N5]$l%RpIgwz2Jr$e#\"><field name=\"NUM\">50</field></shadow><block type=\"v5_sensing_position_of_controller\" id=\"Zdo/+$hJ=[9~;K;23PW3\"><field name=\"CONTROLLER\">Controller1</field><field name=\"AXIS\">Axis3</field></block></value><next><block type=\"v5_motion_set_motor_velocity\" id=\"1iOkc3wp1sl;]G0XS,9e\"><field name=\"MOTOR\">RightSide</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"?R(q%#o#%Y?(*0!%22,s\"><field name=\"NUM\">50</field></shadow><block type=\"v5_sensing_position_of_controller\" id=\"g)RWq#Hq#5jr%pU+vbZ#\"><field name=\"CONTROLLER\">Controller1</field><field name=\"AXIS\">Axis2</field></block></value><next><block type=\"v5_motion_spin\" id=\":?A^G;tDITKdPW4NMWEa\"><field name=\"MOTOR\">LeftSide</field><field name=\"DIRECTION\">fwd</field><next><block type=\"v5_motion_spin\" id=\"f6Pp9p~vmi=*?-j}PLcf\"><field name=\"MOTOR\">RightSide</field><field name=\"DIRECTION\">fwd</field></block></next></block></next></block></next></block></statement><statement name=\"SUBSTACK2\"><block type=\"v5_control_if_then\" id=\"+`Z`b0Cb0^{n2vE0Vbhk\"><value name=\"CONDITION\"><block type=\"v5_operator_equal_to\" id=\"*#3^4jZG3gFoC(B^(2f4\"><value name=\"OPERAND1\"><shadow type=\"math_number\" id=\"8?eiv$BtdXZ|,5j]BVO/\"><field name=\"NUM\">2</field></shadow></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\"!-=||4hk#DDrVIZ=zmQb\"><field name=\"NUM\">50</field></shadow><block type=\"v5_variables_variable\" id=\"yrR(N#%AxzXp$v*PO6^w\"><field name=\"VARIABLE\" id=\"^}X}Byfbn{U@:GFe-$Id\" variabletype=\"\">motorg</field></block></value></block></value><statement name=\"SUBSTACK\"><block type=\"v5_motion_set_motor_velocity\" id=\"NI{a$vQmK~Q?S,TVgPH-\"><field name=\"MOTOR\">Elbow</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"=v]eVmd|.4X`Buvu{z/1\"><field name=\"NUM\">50</field></shadow><block type=\"v5_sensing_position_of_controller\" id=\"p#{Nn*OO^e!+,QsRRKPq\"><field name=\"CONTROLLER\">Controller1</field><field name=\"AXIS\">Axis2</field></block></value><next><block type=\"v5_motion_spin\" id=\"=kAmM8/HVSk664j.,n|Y\"><field name=\"MOTOR\">Elbow</field><field name=\"DIRECTION\">fwd</field></block></next></block></statement></block></statement></block></next></block><block type=\"v5_events_when_started\" id=\"o`!Hb-_}^|2%?AWrX@sB\" x=\"10\" y=\"610\"><next><block type=\"v5_variables_set_variable\" id=\";,*yv|X]#92U[N$9s1Is\"><field name=\"VARIABLE\" id=\"^}X}Byfbn{U@:GFe-$Id\" variabletype=\"\">motorg</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"EK;V0wJp0H1Z2I/ebv]c\"><field name=\"NUM\">1</field></shadow></value></block></next></block><block type=\"v5_events_when_controller_button\" id=\"sAyEXwDo?bS|qgdwQ=,v\" x=\"10\" y=\"770\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonLeft</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"v5_variables_set_variable\" id=\".t|=74Pb5gTc^Z}SG:Y,\"><field name=\"VARIABLE\" id=\"^}X}Byfbn{U@:GFe-$Id\" variabletype=\"\">motorg</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"hk1vNgB6t7|c:r^H/cGo\"><field name=\"NUM\">1</field></shadow></value></block></next></block><block type=\"v5_events_when_controller_button\" id=\";n(PWsLBD?sOouz?]kq(\" x=\"10\" y=\"930\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonRight</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"v5_variables_set_variable\" id=\"v#XW.KTtFroi%dUe0d)3\"><field name=\"VARIABLE\" id=\"^}X}Byfbn{U@:GFe-$Id\" variabletype=\"\">motorg</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"hfE^f%PegNP,!@(|adHS\"><field name=\"NUM\">2</field></shadow></value></block></next></block><block type=\"v5_events_when_controller_button\" id=\"3B$|c*G.tRjgtihB(M:*\" x=\"10\" y=\"1090\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonR2</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"v5_motion_spin_for\" id=\"U:/F@J*4)O6,VCj.b^i(\"><field name=\"MOTOR\">Claw</field><field name=\"DIRECTION\">rev</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"(qolk+:4ZC8K1jwQivqa\"><field name=\"NUM\">90</field></shadow></value></block></next></block><block type=\"v5_events_when_controller_button\" id=\"xs!*J.hGft%C-Q_/%2~=\" x=\"10\" y=\"1250\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonR1</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"v5_motion_spin_for\" id=\"l7J{.-ZKhl?t#HG~~);w\"><field name=\"MOTOR\">Claw</field><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"RG8h@N+cjkAu$$W[z2N7\"><field name=\"NUM\">90</field></shadow></value></block></next></block></xml>","rconfig":[{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"LeftSide","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"}},{"port":[1,2],"name":"LeftSide","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"false"}},{"port":[3,4],"name":"RightSide","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"false","id":"partner"}},{"port":[5],"name":"Elbow","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"}},{"port":[6],"name":"Claw","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"}}],"slot":0,"platform":"V5","sdkVersion":"20220215.18.00.00","appVersion":"2.3.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ncontroller Controller1 = controller(primary);\nmotor LeftSideMotorA = motor(PORT1, ratio18_1, false);\nmotor LeftSideMotorB = motor(PORT2, ratio18_1, false);\nmotor_group LeftSide = motor_group(LeftSideMotorA, LeftSideMotorB);\n\nmotor RightSideMotorA = motor(PORT3, ratio18_1, false);\nmotor RightSideMotorB = motor(PORT4, ratio18_1, false);\nmotor_group RightSide = motor_group(RightSideMotorA, RightSideMotorB);\n\nmotor Elbow = motor(PORT5, ratio18_1, false);\n\nmotor Claw = motor(PORT6, ratio18_1, false);\n\n\n\n\n// Generated code.\n\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool Controller1RightShoulderControlMotorsStopped = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // check the ButtonR1/ButtonR2 status to control LeftSide\n      if (Controller1.ButtonR1.pressing()) {\n        LeftSide.spin(forward);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonR2.pressing()) {\n        LeftSide.spin(reverse);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (!Controller1RightShoulderControlMotorsStopped) {\n        LeftSide.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1RightShoulderControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\ncompetition Competition;\n\nfloat motorg;\n\nevent message1 = event();\n\n// \"when driver control\" hat block\nint ondriver_drivercontrol_0() {\n  if (1.0 == motorg) {\n    LeftSide.setVelocity(Controller1.Axis3.position(), percent);\n    RightSide.setVelocity(Controller1.Axis2.position(), percent);\n    LeftSide.spin(forward);\n    RightSide.spin(forward);\n  }\n  else {\n    if (2.0 == motorg) {\n      Elbow.setVelocity(Controller1.Axis2.position(), percent);\n      Elbow.spin(forward);\n    }\n  }\n  return 0;\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  motorg = 1.0;\n  return 0;\n}\n\n// \"when Controller1 ButtonLeft pressed\" hat block\nvoid onevent_Controller1ButtonLeft_pressed_0() {\n  motorg = 1.0;\n}\n\n// \"when Controller1 ButtonRight pressed\" hat block\nvoid onevent_Controller1ButtonRight_pressed_0() {\n  motorg = 2.0;\n}\n\n// \"when Controller1 ButtonR2 pressed\" hat block\nvoid onevent_Controller1ButtonR2_pressed_0() {\n  Claw.spinFor(reverse, 90.0, degrees, true);\n}\n\n// \"when Controller1 ButtonR1 pressed\" hat block\nvoid onevent_Controller1ButtonR1_pressed_0() {\n  Claw.spinFor(forward, 90.0, degrees, true);\n}\n\nvoid VEXcode_driver_task() {\n  // Start the driver control tasks....\n  vex::task drive0(ondriver_drivercontrol_0);\n\n\n  while(Competition.isDriverControl() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  drive0.stop();\n  return;\n}\n\nvoid VEXcode_auton_task() {\n  // Start the auton control tasks....\n\n  while(Competition.isAutonomous() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n\n  return;\n}\n\n\n\nint main() {\n  vex::competition::bStopTasksBetweenModes = false;\n  Competition.autonomous(VEXcode_auton_task);\n  Competition.drivercontrol(VEXcode_driver_task);\n\n  // register event handlers\n  Controller1.ButtonLeft.pressed(onevent_Controller1ButtonLeft_pressed_0);\n  Controller1.ButtonRight.pressed(onevent_Controller1ButtonRight_pressed_0);\n  Controller1.ButtonR2.pressed(onevent_Controller1ButtonR2_pressed_0);\n  Controller1.ButtonR1.pressed(onevent_Controller1ButtonR1_pressed_0);\n\n  wait(15, msec);\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  whenStarted1();\n}","target":"Physical"}